--- a/quickjs/CMakeLists.txt
+++ b/quickjs/CMakeLists.txt
@@ -6,6 +6,41 @@ file(STRINGS VERSION version)
 set(quickjs_src quickjs.c libbf.c libunicode.c libregexp.c cutils.c quickjs-libc.c)
 set(quickjs_def CONFIG_VERSION="${version}" _GNU_SOURCE CONFIG_BIGNUM)
 
+INCLUDE(CheckCXXSourceCompiles)
+check_cxx_source_compiles("
+    #include <atomic>
+    #include <stdint.h>
+    int main() {
+        std::atomic<int64_t> x;
+        x = 1;
+        x--;
+        return (int) x;
+    }"
+    atomic64)
+
+if(NOT atomic64)
+    find_library(ATOMIC NAMES atomic libatomic.so.1)
+
+    if(ATOMIC)
+        set(LIBATOMIC ${ATOMIC})
+        message(STATUS "Found libatomic: ${LIBATOMIC}")
+    else()
+	    check_cxx_source_compiles("
+            #include <atomic>
+            #include <stdint.h>
+            int main() {
+                std::atomic<int32_t> x;
+                x = 1;
+                x--;
+                return (int) x;
+            }"
+            atomic32)
+
+        if(atomic32)
+            message(FATAL_ERROR "Failed to find libatomic!")
+        endif()
+    endif()
+endif()
 
 add_library(quickjs ${quickjs_src})
 target_compile_definitions(quickjs PRIVATE ${quickjs_def} )
@@ -13,6 +48,9 @@ target_compile_definitions(quickjs PRIVATE ${quickjs_def} )
 add_library(quickjs-dumpleaks ${quickjs_src})
 target_compile_definitions(quickjs-dumpleaks PRIVATE ${quickjs_def} DUMP_LEAKS=1)
 
+target_link_libraries(quickjs ${CMAKE_DL_LIBS} m ${LIBATOMIC})
+target_link_libraries(quickjs-dumpleaks ${CMAKE_DL_LIBS} m ${LIBATOMIC})
+
 if(UNIX)
   find_package(Threads)
   target_link_libraries(quickjs ${CMAKE_DL_LIBS} m Threads::Threads)
