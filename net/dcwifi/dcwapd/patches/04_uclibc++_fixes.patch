--- a/dcw/controller.cxx
+++ b/dcw/controller.cxx
@@ -195,7 +195,7 @@ void Controller::OnStationUnjoin(const MacAddress& primaryMacAddr, const Message
   //remove any channel bondings matching the provided data channel mac addresses
   for (unsigned i = 0; i < m.data_macaddr_count; i++) {
     const ::dcw::MacAddress dcaddr(m.data_macaddrs[i]);
-    const ::dcw::TrafficPolicy::DataChannelMap::iterator dcmEntry = state.policy.dataChannels.find(dcaddr);
+    ::dcw::TrafficPolicy::DataChannelMap::iterator dcmEntry = state.policy.dataChannels.find(dcaddr);
     if (dcmEntry == state.policy.dataChannels.end()) continue;
     if (dcmEntry->second == NULL) {
       dcwlogwarnf("Data channel MAC address %s on client %s is not currently bonded\n", dcaddr.ToString().c_str(), primaryMacAddr.ToString().c_str());
@@ -238,7 +238,7 @@ void Controller::OnStationAck(const MacAddress& primaryMacAddr, const Message& m
   dcwlogdbgf("Got a station ACK from %s\n", primaryMacAddr.ToString().c_str());
 
   // first make sure this client has actually sent a join first...
-  const ClientStateMap::iterator client = _clients.find(primaryMacAddr);
+  ClientStateMap::iterator client = _clients.find(primaryMacAddr);
   if (client == _clients.end()) {
     dcwlogerrf("Got a client ACK without a station join from %s\n", primaryMacAddr.ToString().c_str());
     Message reply(DCWMSG_AP_REJECT_STA);
--- a/dcwposix/processsignalmanager.cxx
+++ b/dcwposix/processsignalmanager.cxx
@@ -40,7 +40,7 @@ ProcessSignalManager::~ProcessSignalManager() {
 }
 
 void ProcessSignalManager::RegisterEventHandler(const int signum, ::dcwposix::ProcessSignalManager::EventHandler& eventHandler) {
-  const SignalMap::iterator i = _sigmap.find(signum);
+  SignalMap::iterator i = _sigmap.find(signum);
   if (i == _sigmap.end()) {
     //be sure to preseve the old signal when inserting a new "unseen" signal
     _sigmap[signum].insert(&eventHandler);
@@ -53,7 +53,7 @@ void ProcessSignalManager::RegisterEventHandler(const int signum, ::dcwposix::Pr
 }
 
 void ProcessSignalManager::UnRegisterEventHandler(const int signum, ::dcwposix::ProcessSignalManager::EventHandler& eventHandler) {
-  const SignalMap::iterator i = _sigmap.find(signum);
+  SignalMap::iterator i = _sigmap.find(signum);
 
   if (i == _sigmap.end()) {
     dcwlogwarnf("Attempting to unregister handler %p non-registered process signal #%d\n", &eventHandler, signum);